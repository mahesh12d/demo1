{
	"name": "game_df_so1",
	"properties": {
		"folder": {
			"name": "game_DF"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "team",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "player",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sink_out",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage_databag",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "filter1",
					"description": "all data from source1 only with no intersection"
				},
				{
					"name": "s2"
				},
				{
					"name": "s1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          team as string,",
				"          region as string,",
				"          matchType as string,",
				"          Baron as short,",
				"          Dra as short,",
				"          Turts as short,",
				"          kills as short,",
				"          deaths as short,",
				"          assists as short,",
				"          CS as integer,",
				"          gold as integer,",
				"          damage as double,",
				"          tanking as double,",
				"          matches_played as short,",
				"          matches_won as short,",
				"          minutes_played as double,",
				"          matches_lose as short,",
				"          win_rate as double,",
				"          Baron_per_game as double,",
				"          Dra_per_game as double,",
				"          Turts_per_game as double,",
				"          kills_per_game as double,",
				"          deaths_per_game as double,",
				"          assists_per_game as double,",
				"          CS_per_minute as double,",
				"          gold_per_minute as double,",
				"          damage_per_game as double,",
				"          tanking_per_game as double,",
				"          KDA as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          player_name as string,",
				"          team as string,",
				"          region as string,",
				"          matchType as string,",
				"          position as string,",
				"          kills as string,",
				"          deaths as string,",
				"          assists as string,",
				"          CS as string,",
				"          gold as string,",
				"          damage as string,",
				"          tanking as string,",
				"          matches_played as string,",
				"          matches_won as string,",
				"          minutes_played as string,",
				"          matches_lose as string,",
				"          win_rate as string,",
				"          kills_per_game as string,",
				"          deaths_per_game as string,",
				"          assists_per_game as string,",
				"          CS_per_minute as string,",
				"          gold_per_minute as string,",
				"          damage_per_game as string,",
				"          tanking_per_game as string,",
				"          KDA as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"s1, s2 join(s1@matchType == s2@matchType,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 filter(length(s1@matchType)>4) ~> filter1",
				"source2 select(mapColumn(",
				"          player_name,",
				"          team,",
				"          region,",
				"          matchType,",
				"          CS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> s2",
				"source1 select(mapColumn(",
				"          team,",
				"          region,",
				"          matchType,",
				"          Baron,",
				"          Dra",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> s1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     emptyLinesAsHeader: 1,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}